/**
 * Owl VDOM
 *
 * This file contains an implementation of a virtual DOM, which is a system that
 * can generate in-memory representations of a DOM tree, compare them, and
 * eventually change a concrete DOM tree to match its representation, in an
 * hopefully efficient way.
 *
 * Note that this code is a fork of Snabbdom, slightly tweaked/optimized for our
 * needs (see https://github.com/snabbdom/snabbdom).
 *
 * The main exported values are:
 * - interface VNode
 * - h function (a helper function to generate a vnode)
 * - patch function (to apply a vnode to an actual DOM node)
 */
declare global {
    interface Element {
        setAttribute(name: string, value: string | number | boolean): void;
        setAttributeNS(namespaceURI: string, qualifiedName: string, value: string | number | boolean): void;
    }
}
declare type Props = Record<string, any>;
declare type Attrs = Record<string, string | number | boolean>;
declare type On = {
    [N in keyof HTMLElementEventMap]?: (ev: HTMLElementEventMap[N]) => void;
} & {
    [event: string]: EventListener;
};
export interface Module {
    pre: PreHook;
    create: CreateHook;
    update: UpdateHook;
    destroy: DestroyHook;
    remove: RemoveHook;
    post: PostHook;
}
declare type Key = string | number;
export interface VNode {
    sel: string | undefined;
    data: VNodeData | undefined;
    children: Array<VNode | string> | undefined;
    elm: Node | undefined;
    text: string | undefined;
    key: Key | undefined;
}
export interface VNodeData {
    props?: Props;
    attrs?: Attrs;
    on?: On;
    hook?: Hooks;
    key?: Key;
    ns?: string;
    [key: string]: any;
}
export declare function init(modules: Array<Partial<Module>>, domApi?: DOMAPI): (oldVnode: VNode | Element, vnode: VNode) => VNode;
interface DOMAPI {
    createElement: (tagName: any) => HTMLElement;
    createElementNS: (namespaceURI: string, qualifiedName: string) => Element;
    createTextNode: (text: string) => Text;
    createComment: (text: string) => Comment;
    insertBefore: (parentNode: Node, newNode: Node, referenceNode: Node | null) => void;
    removeChild: (node: Node, child: Node) => void;
    appendChild: (node: Node, child: Node) => void;
    parentNode: (node: Node) => Node;
    nextSibling: (node: Node) => Node;
    tagName: (elm: Element) => string;
    setTextContent: (node: Node, text: string | null) => void;
}
declare type PreHook = () => any;
declare type InitHook = (vNode: VNode) => any;
declare type CreateHook = (emptyVNode: VNode, vNode: VNode) => any;
declare type InsertHook = (vNode: VNode) => any;
declare type PrePatchHook = (oldVNode: VNode, vNode: VNode) => any;
declare type UpdateHook = (oldVNode: VNode, vNode: VNode) => any;
declare type PostPatchHook = (oldVNode: VNode, vNode: VNode) => any;
declare type DestroyHook = (vNode: VNode) => any;
declare type RemoveHook = (vNode: VNode, removeCallback: () => void) => any;
declare type PostHook = () => any;
interface Hooks {
    pre?: PreHook;
    init?: InitHook;
    create?: CreateHook;
    insert?: InsertHook;
    prepatch?: PrePatchHook;
    update?: UpdateHook;
    postpatch?: PostPatchHook;
    destroy?: DestroyHook;
    remove?: RemoveHook;
    post?: PostHook;
}
declare type VNodes = Array<VNode>;
declare type VNodeChildElement = VNode | string | number | undefined | null;
declare type ArrayOrElement<T> = T | T[];
declare type VNodeChildren = ArrayOrElement<VNodeChildElement>;
export declare function addNS(data: any, children: VNodes | undefined, sel: string | undefined): void;
export declare function h(sel: string): VNode;
export declare function h(sel: string, data: VNodeData): VNode;
export declare function h(sel: string, children: VNodeChildren): VNode;
export declare function h(sel: string, data: VNodeData, children: VNodeChildren): VNode;
export {};
