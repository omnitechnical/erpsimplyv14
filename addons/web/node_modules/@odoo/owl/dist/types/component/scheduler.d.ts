import { Fiber } from "./fiber";
/**
 * Owl Scheduler Class
 *
 * The scheduler is the part of Owl that will effectively apply a rendering
 * whenever a fiber is ready.
 *
 * Briefly, it can be used to register root fibers.  Whenever there is an
 * active root fiber, it will poll continuously each animation frame (so, about
 * once every 16ms) and whenever a root fiber is ready, it will apply it.
 */
interface Task {
    fiber: Fiber;
    callback: (err?: Error) => void;
}
export declare class Scheduler {
    tasks: Task[];
    isRunning: boolean;
    requestAnimationFrame: Window["requestAnimationFrame"];
    constructor(requestAnimationFrame: Window["requestAnimationFrame"]);
    start(): void;
    stop(): void;
    addFiber(fiber: Fiber): Promise<void>;
    rejectFiber(fiber: Fiber, reason: string): void;
    /**
     * Process all current tasks. This only applies to the fibers that are ready.
     * Other tasks are left unchanged.
     */
    flush(): void;
    scheduleTasks(): void;
}
export declare const scheduler: Scheduler;
export {};
