import { VNode } from "../vdom/index";
import { Component, MountPosition } from "./component";
/**
 * Owl Fiber Class
 *
 * Fibers are small abstractions designed to contain all the internal state
 * associated with a "rendering work unit", relative to a specific component.
 *
 * A rendering will cause the creation of a fiber for each impacted components.
 *
 * Fibers capture all that necessary information, which is critical to owl
 * asynchronous rendering pipeline. Fibers can be cancelled, can be in different
 * states and in general determine the state of the rendering.
 */
export declare class Fiber {
    static nextId: number;
    id: number;
    force: boolean;
    isCompleted: boolean;
    shouldPatch: boolean;
    isRendered: boolean;
    counter: number;
    target: HTMLElement | DocumentFragment | null;
    position: MountPosition | null;
    scope: any;
    component: Component;
    vnode: VNode | null;
    root: Fiber;
    child: Fiber | null;
    sibling: Fiber | null;
    lastChild: Fiber | null;
    parent: Fiber | null;
    error?: Error;
    constructor(parent: Fiber | null, component: Component, force: boolean, target: HTMLElement | DocumentFragment | null, position: MountPosition | null);
    /**
     * When the oldFiber is not completed yet, and both oldFiber and this fiber
     * are root fibers, we want to reuse the oldFiber instead of creating a new
     * one. Doing so will guarantee that the initiator(s) of those renderings will
     * be notified (the promise will resolve) when the last rendering will be done.
     *
     * This function thus assumes that oldFiber is a root fiber.
     */
    _reuseFiber(oldFiber: Fiber): void;
    /**
     * In some cases, a rendering initiated at some component can detect that it
     * should be part of a larger rendering initiated somewhere up the component
     * tree.  In that case, it needs to cancel the previous rendering and
     * remap itself as a part of the current parent rendering.
     */
    _remapFiber(oldFiber: Fiber): void;
    /**
     * This function has been taken from
     * https://medium.com/react-in-depth/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7
     */
    _walk(doWork: (f: Fiber) => Fiber | null): void;
    /**
     * Successfully complete the work of the fiber: call the mount or patch hooks
     * and patch the DOM. This function is called once the fiber and its children
     * are ready, and the scheduler decides to process it.
     */
    complete(): void;
    /**
     * Cancel a fiber and all its children.
     */
    cancel(): void;
    /**
     * This is the global error handler for errors occurring in Owl main lifecycle
     * methods.  Caught errors are triggered on the QWeb instance, and are
     * potentially given to some parent component which implements `catchError`.
     *
     * If there are no such component, we destroy everything. This is better than
     * being in a corrupted state.
     */
    handleError(error: Error): void;
}
