import { Env } from "../component/component";
declare type NavigationGuard = (info: {
    env: Env;
    to: Route | null;
    from: Route | null;
}) => boolean | Destination;
export interface Route {
    name: string;
    path: string;
    component?: any;
    redirect?: Destination;
    params: string[];
    beforeRouteEnter?: NavigationGuard;
}
export declare type RouteParams = {
    [key: string]: string | number;
};
export interface RouterEnv extends Env {
    router: Router;
}
export interface Destination {
    path?: string;
    to?: string;
    params?: RouteParams;
}
interface Options {
    mode: Router["mode"];
}
export interface EnvWithRouter extends Env {
    router: Router;
}
export declare class Router {
    currentRoute: Route | null;
    currentParams: RouteParams | null;
    mode: "history" | "hash";
    routes: {
        [id: string]: Route;
    };
    routeIds: string[];
    env: RouterEnv;
    constructor(env: Partial<EnvWithRouter>, routes: Partial<Route>[], options?: Options);
    start(): Promise<void>;
    navigate(to: Destination): Promise<boolean>;
    _navigate(path: string, ev?: any): Promise<boolean>;
    destToPath(dest: Destination): string;
    get currentRouteName(): string | null;
    private setUrlFromPath;
    private validateDestination;
    private routeToPath;
    private currentPath;
    private match;
    private matchAndApplyRules;
    private applyRules;
    private getRouteParams;
}
export {};
