export declare type Key = string | number;
export declare type VNodeEl = HTMLElement | Text | null;
export declare type CreateHook = (el: VNodeEl) => void;
export interface Hooks {
    create?: CreateHook;
}
export declare const enum NodeType {
    DOM = 0,
    Text = 1,
    Data = 2,
    Multi = 3
}
export interface VDOMNode<T> {
    type: NodeType.DOM;
    tag: string;
    el: HTMLElement | null;
    children: VNode<T>[];
    key: Key;
}
export interface VTextNode {
    type: NodeType.Text;
    text: string;
    el: Text | null;
}
export interface VDataNode<T> {
    type: NodeType.Data;
    data: T;
    child: VNode<T> | null;
    key: Key;
    hooks: Hooks;
}
export interface VMultiNode<T> {
    type: NodeType.Multi;
    children: VNode<T>[];
}
export declare type VNode<T> = VDOMNode<T> | VTextNode | VDataNode<T> | VMultiNode<T>;
