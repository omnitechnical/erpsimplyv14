/**
 * Owl Observer
 *
 * This code contains the logic that allows Owl to observe and react to state
 * changes.
 *
 * This is a Observer class that can observe any JS values.  The way it works
 * can be summarized thusly:
 * - primitive values are not observed at all
 * - Objects and arrays are observed by replacing them with a Proxy
 * - each object/array metadata are tracked in a weakmap, and keep a revision
 *   number
 *
 * Note that this code is loosely inspired by Vue.
 */
export declare class Observer {
    rev: number;
    allowMutations: boolean;
    weakMap: WeakMap<any, any>;
    notifyCB(): void;
    observe<T>(value: T, parent?: any): T;
    revNumber(value: any): number;
    _observe(value: any, parent: any): {
        value: any;
        proxy: any;
        rev: number;
        parent: any;
    };
    _updateRevNumber(target: any): void;
}
