import { VDomArray } from "./vdom";
/**
 * Other ideas:
 *
 * - add a DOM_ONECHILD type => skip the patch process for each children
 * - maybe a DOM_STATIC_CHILDREN
 */
export declare type Key = string | number;
export declare type VNodeEl = HTMLElement | Text | Comment | null;
declare type CreateHook = (el: VNodeEl) => void;
interface Hooks {
    create?: CreateHook;
}
export declare const enum NodeType {
    Root = 0,
    Multi = 1,
    DOM = 2,
    Text = 3,
    Comment = 4,
    Static = 5
}
interface BaseNode {
    key?: Key;
}
declare type Handler = (ev: Event) => void;
export declare const enum NodePosition {
    Append = 0,
    After = 1,
    Before = 2
}
export interface VRootNode extends BaseNode {
    type: NodeType.Root;
    child: VNode | null;
    hooks: Hooks;
    staticNodes: HTMLElement[];
    anchor: HTMLElement | DocumentFragment | null;
    position: NodePosition | null;
}
export interface VDOMNode extends BaseNode {
    type: NodeType.DOM;
    tag: string;
    children: VNode[];
    el?: HTMLElement;
    attrs?: {
        [name: string]: string | boolean | number | null;
    };
    on?: {
        [event: string]: Handler;
    };
    listener?: Handler;
    class?: {
        [name: string]: boolean;
    };
}
export interface VStaticNode extends BaseNode {
    type: NodeType.Static;
    id: number;
    el?: HTMLElement;
}
export interface VTextNode extends BaseNode {
    type: NodeType.Text;
    text: any | VDomArray;
    el?: Text;
}
export interface VCommentNode extends BaseNode {
    type: NodeType.Comment;
    text: string;
    el?: Comment;
}
export interface VMultiNode extends BaseNode {
    type: NodeType.Multi;
    children: VNode[];
    staticNodes?: HTMLElement[];
}
export declare type VNode = VDOMNode | VTextNode | VCommentNode | VStaticNode | VRootNode | VMultiNode;
export {};
