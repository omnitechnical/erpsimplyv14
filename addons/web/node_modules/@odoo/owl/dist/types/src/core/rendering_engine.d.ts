import { Fiber } from "./fiber";
import { QWebTemplate } from "../qweb/types";
import { Component } from "./component";
import { VRootNode } from "../vdom/types";
export interface FComponent<T = any, Env = any> {
    template: string;
    components?: {
        [key: string]: FComponent<any> | CComponent;
    };
    name?: string;
    setup?: (props: any, env: Env) => T | void;
}
export declare type CComponent = typeof Component;
export declare type CInstance<Props = any, Env = any> = Component<Props, Env>;
export declare type FInstance<T = {}, Env = any> = T & {
    __owl__: OwlElement<T>;
    props: any;
    env: Env;
};
export interface OwlElement<T = any> {
    fiber: Fiber;
    components: {
        [key: string]: FComponent<T> | CComponent;
    };
    isMounted: boolean;
    instance: FInstance<T> | CInstance | null;
    vnode: VRootNode;
    qweb: QWebTemplate;
}
export declare const core: {
    current: OwlElement<any> | null;
};
export declare type MountTarget = HTMLElement | DocumentFragment;
export interface MountConfig<Env = any> {
    props?: Object;
    env?: Env;
}
export declare function mount<C extends CComponent>(Comp: C, target: MountTarget, config?: MountConfig): Promise<InstanceType<C>>;
export declare function mount(comp: CInstance, target: MountTarget, config?: MountConfig): Promise<CInstance>;
export declare function mount<T, Env>(Comp: FComponent<T>, target: MountTarget, config?: MountConfig<Env>): Promise<FInstance<T extends {} ? T : {}, Env>>;
export declare function mount<T, Env>(comp: FInstance, target: MountTarget, config?: MountConfig<Env>): Promise<FInstance<T extends {} ? T : {}, Env>>;
export declare function render(elem: OwlElement): Promise<void>;
