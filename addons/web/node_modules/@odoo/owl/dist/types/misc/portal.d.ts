import { Component } from "../component/component";
import { VNode } from "../vdom/index";
import { OwlEvent } from "../core/owl_event";
/**
 * Portal
 *
 * The Portal component allows to render a part of a component outside it's DOM.
 * It is for example useful for dialogs: for css reasons, dialogs are in general
 * placed in a specific spot of the DOM (e.g. directly in the body). With the
 * Portal, a component can conditionally specify in its tempate that it contains
 * a dialog, and where this dialog should be inserted in the DOM.
 *
 * The Portal component ensures that the communication between the content of
 * the Portal and its parent properly works: business events reaching the Portal
 * are re-triggered on an empty <portal> node located in the parent's DOM.
 */
interface Props {
    target: string;
}
export declare class Portal extends Component<Props> {
    static template: string;
    static props: {
        target: {
            type: StringConstructor;
        };
    };
    doTargetLookUp: boolean;
    _handledEvents: Set<string>;
    _handlerTunnel: (f: OwlEvent<any>) => void;
    parentEnv: any;
    portal: VNode | null;
    target: Element | null;
    constructor(parent: any, props: any);
    /**
     * Override to revert back to a classic Component's structure
     *
     * @override
     */
    __callWillUnmount(): void;
    /**
     * At each DOM change, we must ensure that the portal contains exactly one
     * child
     */
    __checkVNodeStructure(vnode: VNode): void;
    /**
     * Ensure the target is still there at whichever time we render
     */
    __checkTargetPresence(): void;
    /**
     * Move the portal's element to the target
     */
    __deployPortal(): void;
    /**
     * Override to remove from the DOM the element we have teleported
     *
     * @override
     */
    __destroy(parent: any): void;
    /**
     * Override to patch the element that has been teleported
     *
     * @override
     */
    __patch(target: any, vnode: any): void;
    /**
     * Override to set the env
     */
    __trigger(component: Component, eventType: string, payload?: any): void;
}
export {};
