import { Component } from "./component/component";
/**
 * Owl Hook System
 *
 * This file introduces the concept of hooks, similar to React or Vue hooks.
 * We have currently an implementation of:
 * - useState (reactive state)
 * - onMounted
 * - onWillUnmount
 * - useRef
 */
/**
 * This is the main way a component can be made reactive.  The useState hook
 * will return an observed object (or array).  Changes to that value will then
 * trigger a rerendering of the current component.
 */
export declare function useState<T>(state: T): T;
export declare const onMounted: (cb: any) => void;
export declare const onWillUnmount: (cb: any) => void;
export declare const onWillPatch: (cb: any) => void;
export declare const onPatched: (cb: any) => void;
export declare const onWillStart: (cb: any) => void;
export declare const onWillUpdateProps: (cb: any) => void;
/**
 * The purpose of this hook is to allow components to get a reference to a sub
 * html node or component.
 */
interface Ref<C extends Component = Component> {
    el: HTMLElement | null;
    comp: C | null;
}
export declare function useRef<C extends Component = Component>(name: string): Ref<C>;
/**
 * This hook is a simple way to let components use a sub environment.  Note that
 * like for all hooks, it is important that this is only called in the
 * constructor method.
 */
export declare function useSubEnv(nextEnv: any): void;
/**
 * When a component needs to listen to DOM Events on element(s) that are not
 * part of his hierarchy, we can use the `useExternalListener` hook.
 * It will correctly add and remove the event listener, whenever the
 * component is mounted and unmounted.
 *
 * Example:
 *  a menu needs to listen to the click on window to be closed automatically
 *
 * Usage:
 *  in the constructor of the OWL component that needs to be notified,
 *  `useExternalListener(window, 'click', this._doSomething);`
 * */
export declare function useExternalListener(target: HTMLElement | typeof window, eventName: string, handler: any, eventParams?: any): void;
export {};
